// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstname    String
  secondname   String
  lastname     String
  password     String
  email        String   @unique
  phone        String   @unique
  type         Role     @default(user)
  accessToken  String?
  refreshToken String?
  orders       Order[]
  reviews      Review[]
  basket       Basket?
}

enum Role {
  user
  admin
}

model Category {
  id               Int        @id @default(autoincrement())
  title            String?
  parentCategoryId Int?
  parentCategory   Category?  @relation("CategorieType", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  childCategories  Category[] @relation("CategorieType")
  details          Detail[]
}

model Detail {
  id               Int          @id @default(autoincrement())
  title            String
  shortDescription String
  options          String?
  price            Int
  star             Int          @default(0)
  img              String?
  vendorCode       String?
  models           CarModel[]
  categories       Category[]
  reviews          Review[]
  basketItems      BasketItem[]
  orderItems       OrderItem[]
}

// model Order {
//   id        Int      @id @default(autoincrement())
//   amount    Json?
//   userId    Int
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   details   Detail[]
// }

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Int
  createdAt  DateTime    @default(now())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  amount   Int    @default(1)
  orderId  Int
  detailId Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  detail   Detail @relation(fields: [detailId], references: [id], onDelete: Cascade)
}

model Basket {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  basketItems BasketItem[]
}

model BasketItem {
  id       Int    @id @default(autoincrement())
  basketId Int
  basket   Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)
  amount   Int    @default(1)
  detailId Int
  detail   Detail @relation(fields: [detailId], references: [id], onDelete: Cascade)
}

model CarModel {
  id          Int        @id @default(autoincrement())
  title       String
  model       String?
  releaseDate String?
  brandId     Int?
  img         String?
  brand       CarModel?  @relation("Brand", fields: [brandId], references: [id], onDelete: Cascade)
  brandModels CarModel[] @relation("Brand")
  details     Detail[]
}

model Review {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  detailId Int
  detail   Detail @relation(fields: [detailId], references: [id], onDelete: Cascade)
  star     Int
  content  String
}

{"version":3,"file":"static/js/496.a7c084ad.chunk.js","mappings":"+UAwHA,UAtGgB,WACd,OAKIA,EAAAA,EAAAA,IAAqB,CACvBC,eAAgB,aALhBC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAITE,GAAQC,EAAAA,EAAAA,IAAS,CACrBC,YAAY,EACZC,SAAU,IACVC,OAAQ,UAEJC,GAAOC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMF,KAAKA,SAClDG,EAAAA,EAAAA,YAAU,WACmCH,EAAnCI,YAAmCJ,EAAtBK,KAArB,IAA8BC,GAA9B,OAA2CN,EAA3C,GACAR,GAAM,UAAKc,MACV,CAACN,EAAMR,IACV,IAAMe,GAAWC,EAAAA,EAAAA,KACXC,EAAa,mCAAG,WAAOC,GAAP,gFACZC,EAAqED,EAArEC,gBAA8BC,EAAuCF,EAApDG,YAAuBC,EAA6BJ,EAA7BI,YAAgBC,GAD5C,OACyDL,EADzD,KAEhBI,GAAeH,GAAmBC,GAFlB,mBAGdA,IAAaD,EAHC,yCAIThB,EAAM,CACXqB,MAAO,8GALO,gCAUKT,GAASU,EAAAA,EAAAA,KAAY,kBAAKF,GAAN,IAAgBH,SAAAA,EAAUE,YAAAA,MAAgBI,SAVnE,UAWM,MAXN,OAWLnB,OAXK,0CAYTJ,EAAM,CACXI,OAAQ,UACRiB,MAAO,uGAdO,0DAkBlBrB,EAAM,CACJqB,MAAO,KAASG,KAAKC,UAnBL,0DAAH,sDAuBnB,OACE,UAAC,KAAD,CAAWC,SAAU,eAArB,WACE,SAAC,KAAD,CAAMC,UAAU,OAAOC,WAAY,SAAUC,SAAU,KAAvD,yDAGA,UAAC,KAAD,CAAWH,SAAU,eAAgBC,UAAU,OAA/C,WACE,UAAC,KAAD,CAAKA,UAAU,OAAf,WACE,SAAC,KAAD,0DACA,SAAC,MAAD,QAAOG,YAAahC,EAAOiC,YAAgBpC,EAAS,aAAc,CAAEqC,UAAU,UAEhF,UAAC,KAAD,CAAKL,UAAU,OAAf,WACE,SAAC,KAAD,kCACA,SAAC,MAAD,QACEG,YAAahC,EAAOmC,UACpBD,UAAQ,GACJrC,EAAS,YAAa,CAAEqC,UAAU,UAI1C,UAAC,KAAD,CAAKL,UAAU,OAAf,WACE,SAAC,KAAD,gEACA,SAAC,MAAD,QACEG,YAAahC,EAAOoC,SACpBF,UAAQ,GACJrC,EAAS,WAAY,CAAEqC,UAAU,UAIzC,UAAC,KAAD,CAAKL,UAAU,OAAf,WACE,SAAC,KAAD,8CACA,SAAC,MAAD,QAAOG,YAAahC,EAAOqC,MAAOH,UAAQ,GAAKrC,EAAS,QAAS,CAAEqC,UAAU,UAE/E,UAAC,KAAD,CAAKL,UAAU,OAAf,WACE,SAAC,KAAD,0DACA,SAAC,MAAD,QAAOG,YAAahC,EAAOsC,MAAOJ,UAAQ,GAAKrC,EAAS,QAAS,CAAEqC,UAAU,UAG/E,UAAC,KAAD,CAAKL,UAAU,OAAf,WACE,SAAC,KAAD,yFACA,SAAC,MAAD,QAAOjB,KAAM,YAAgBf,EAAS,qBAExC,UAAC,KAAD,CAAKgC,UAAU,OAAf,WACE,SAAC,KAAD,mFACA,SAAC,MAAD,QAAOjB,KAAM,YAAgBf,EAAS,qBAExC,UAAC,KAAD,CAAKgC,UAAU,OAAf,WACE,SAAC,KAAD,mIACA,SAAC,MAAD,QAAOjB,KAAM,YAAgBf,EAAS,yBAExC,SAAC,KAAD,CAAKgC,UAAU,kBAAf,UACE,SAAC,KAAD,CAAQU,YAAa,OAAQC,QAAS1C,EAAakB,GAAnD","sources":["pages/Profile/Profile.tsx"],"sourcesContent":["import { Box, Button, Container, FormLabel, Input, Text, useToast } from '@chakra-ui/react'\r\nimport { AxiosResponse } from 'axios'\r\nimport React, { useEffect } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks'\r\nimport { editProfile } from 'store/user/user.action'\r\n\r\ninterface IFormValues {\r\n  firstname: string\r\n  secondname: string\r\n  lastname: string\r\n  email: string\r\n  phone: string\r\n  newPassword?: string\r\n  oldPassword?: string\r\n  confirmPassword?: string\r\n}\r\n\r\nconst Profile = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<IFormValues>({\r\n    reValidateMode: 'onChange',\r\n  })\r\n  const toast = useToast({\r\n    isClosable: true,\r\n    duration: 3000,\r\n    status: 'error',\r\n  })\r\n  const user = useAppSelector((state) => state.user.user)\r\n  useEffect(() => {\r\n    const { accessToken, type, ...formUser } = user\r\n    reset({ ...formUser })\r\n  }, [user, reset])\r\n  const dispatch = useAppDispatch()\r\n  const sumbitHandler = async (values: IFormValues) => {\r\n    const { confirmPassword, newPassword: password, oldPassword, ...userData } = values\r\n    if (oldPassword && confirmPassword && password) {\r\n      if (password !== confirmPassword)\r\n        return toast({\r\n          title: 'Пароли не совпадают',\r\n        })\r\n    }\r\n\r\n    try {\r\n      const response = await dispatch(editProfile({ ...userData, password, oldPassword })).unwrap()\r\n      if (response.status === 200) {\r\n        return toast({\r\n          status: 'success',\r\n          title: 'Успешно обновлено',\r\n        })\r\n      }\r\n    } catch (response: any) {\r\n      toast({\r\n        title: response.data.message,\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <Container maxWidth={'container.xl'}>\r\n      <Text className=\"mt-2\" fontWeight={'medium'} fontSize={'xl'}>\r\n        Профиль\r\n      </Text>\r\n      <Container maxWidth={'container.sm'} className=\"mt-4\">\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Фамилия</FormLabel>\r\n          <Input isInvalid={!!errors.secondname} {...register('secondname', { required: true })} />\r\n        </Box>\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Имя</FormLabel>\r\n          <Input\r\n            isInvalid={!!errors.firstname}\r\n            required\r\n            {...register('firstname', { required: true })}\r\n          />\r\n        </Box>\r\n\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Отчество</FormLabel>\r\n          <Input\r\n            isInvalid={!!errors.lastname}\r\n            required\r\n            {...register('lastname', { required: true })}\r\n          />\r\n        </Box>\r\n\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Почта</FormLabel>\r\n          <Input isInvalid={!!errors.email} required {...register('email', { required: true })} />\r\n        </Box>\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Телефон</FormLabel>\r\n          <Input isInvalid={!!errors.phone} required {...register('phone', { required: true })} />\r\n        </Box>\r\n\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Старый пароль</FormLabel>\r\n          <Input type={'password'} {...register('oldPassword')} />\r\n        </Box>\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Новый пароль</FormLabel>\r\n          <Input type={'password'} {...register('newPassword')} />\r\n        </Box>\r\n        <Box className=\"mt-2\">\r\n          <FormLabel>Подтверждение пароля</FormLabel>\r\n          <Input type={'password'} {...register('confirmPassword')} />\r\n        </Box>\r\n        <Box className=\"text-right mt-6\">\r\n          <Button colorScheme={'blue'} onClick={handleSubmit(sumbitHandler)}>\r\n            Сохранить\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n"],"names":["useForm","reValidateMode","register","handleSubmit","reset","errors","formState","toast","useToast","isClosable","duration","status","user","useAppSelector","state","useEffect","accessToken","type","formUser","dispatch","useAppDispatch","sumbitHandler","values","confirmPassword","password","newPassword","oldPassword","userData","title","editProfile","unwrap","data","message","maxWidth","className","fontWeight","fontSize","isInvalid","secondname","required","firstname","lastname","email","phone","colorScheme","onClick"],"sourceRoot":""}